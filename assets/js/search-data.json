{
  
    
        "post0": {
            "title": "List, Set, Dict comprehension en espa√±ol",
            "content": "Hola mente de simio üß† ü¶ç . List, Set, Dict comprehension en espa&#241;ol . Comprensi&#243;n de lista (List), grupo (Set), diccionario (Dict) . Crea una nueva lista filtrando elementos de una colecci√≥n (List / Set / Dict), cada elemento es transformada por una sola expresi√≥n. La filtraci√≥n puede ser hecha de forma condicional, dada por una condici√≥n (opcional). . [expresion for valor in colecci√≥n if condici√≥n] . Lo cual es equivalente a:pythonresultado = [] for valor in colleccion: if condicion: resultado.append(expresion) . Comprensi&#243;n anidada . Las comprensiones se pueden anidar, de igual formar que se pueden anidar loops. . [expresion for valor in colecci√≥n if condici√≥n for valor2 in colecci√≥n2 if condici√≥n2 ] . Nota:- colecci√≥n y colecci√≥n2 pueden ser la misma colecci√≥n - condici√≥n y condici√≥n2 pueden ser la misma condici√≥n . Lo cual es equivalente a: . resultado = [] for valor in colleccion: if condicion: for valor2 in coleccion2: if condicion2: resultado.append(expresion) . Ejemplo - sin comprensi&#243;n de lista, usando un loop: . frutas = [&quot;mango&quot;, &quot;manzana&quot;, &quot;pera&quot;] # En forma de for loop # Convertimos las frutas en may√∫sculas frutasMayus = [] for fr in frutas: if fr.islower(): frutasMayus.append(fr.upper()) print(&quot;frutasMayus:&quot;, frutasMayus) . frutasMayus: [&#39;MANGO&#39;, &#39;MANZANA&#39;, &#39;PERA&#39;] . Ejemplo - comprensi&#243;n de lista: . frutas = [&quot;mango&quot;, &quot;manzana&quot;, &quot;pera&quot;] # Usando comprensi√≥n de lista # Convertimos las frutas en may√∫sculas frutasMayus = [fr.upper() for fr in frutas if fr.islower()] print(&quot;frutasMayus:&quot;, frutasMayus) . frutasMayus: [&#39;MANGO&#39;, &#39;MANZANA&#39;, &#39;PERA&#39;] . Ejemplo - comprensi&#243;n de lista anidada: . ingredientes = [[&quot;mango&quot;, &quot;manzana&quot;, &quot;cebolla&quot;], [], [&quot;sal&quot;, &quot;az√∫car&quot;, &quot;aceite&quot;]] # Usando comprensi√≥n de lista anidada # Creamos una lista solo con los ingredientes que tienen &quot;e&quot; ingredientes_e = [ingr for ingrSublista in ingredientes for ingr in ingrSublista if &quot;e&quot; in ingr] print(&quot;ingredientes_e:&quot;, ingredientes_e) . ingredientes_e: [&#39;cebolla&#39;, &#39;aceite&#39;] . Ejemplo - comprensi&#243;n de lista dentro de otra comprensi&#243;n de lista: . ingredientes_en_listas = [[&quot;mango&quot;, &quot;manzana&quot;], [&quot;cebolla&quot;, &quot;apio&quot;]] # Usando comprensi√≥n de lista anidada # Removemos los ingredientes que no tienen &quot;o&quot; ingredientes_o = [[ingr.upper() for ingr in lista if &quot;o&quot; in ingr] for lista in ingredientes_en_listas] print(&quot;ingredientes_o:&quot;, ingredientes_o) . ingredientes_o: [[&#39;MANGO&#39;], [&#39;CEBOLLA&#39;, &#39;APIO&#39;]] . Ejemplo - comprensi&#243;n de grupo: . frutas_grupo = {&quot;mango&quot;, &quot;manzana&quot;, &quot;pera&quot;} frutas_mayus = {fruta.upper() for fruta in frutas_grupo if fruta.islower()} frutas_mayus . {&#39;MANGO&#39;, &#39;MANZANA&#39;, &#39;PERA&#39;} . Ejemplos - comprensi&#243;n de diccionario: . Ejemplos - comprensi&#243;n de diccionario sobre una lista: . frutas = [&quot;mango&quot;, &quot;manzana&quot;, &quot;pera&quot;] frutas_set_o = {fruta.upper()+&quot;!&quot; for fruta in frutas if &quot;o&quot; in fruta} frutas_set_o . {&#39;MANGO!&#39;} . Ejemplos - comprensi&#243;n de diccionario sobre un diccionario: . frutas_dict = {&quot;mango&quot;: &quot;amarillo&quot;, &quot;manzana&quot;: &quot;rojo&quot;, &quot;pera&quot;: &quot;verde&quot;} frutas_dict_o = {fruta.upper() : color.upper() for fruta, color in frutas_dict.items() if &quot;o&quot; in color} frutas_dict_o . {&#39;MANGO&#39;: &#39;AMARILLO&#39;, &#39;MANZANA&#39;: &#39;ROJO&#39;} . Adi√≥s mente de simio üß† ü¶ç .",
            "url": "https://juancarl0s.com/python/tutorial/espa%C3%B1ol/2020/12/06/comprension-List-Set-Dict.html",
            "relUrl": "/python/tutorial/espa%C3%B1ol/2020/12/06/comprension-List-Set-Dict.html",
            "date": " ‚Ä¢ Dec 6, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Pie chart",
            "content": "Pie chart . Way of representing the frequency distribution of a variable . import matplotlib as mpl import matplotlib.pyplot as plt import pandas as pd . Pandas has a built-in implementation of matplotlib, which makes plotting much easier for us. Let&#39;s try it out . df = pd.read_csv(r&#39;./college/diversity_school.csv&#39;) # load data df.head() . name total_enrollment state category enrollment . 0 University of Phoenix-Arizona | 195059 | Arizona | Women | 134722 | . 1 University of Phoenix-Arizona | 195059 | Arizona | American Indian / Alaska Native | 876 | . 2 University of Phoenix-Arizona | 195059 | Arizona | Asian | 1959 | . 3 University of Phoenix-Arizona | 195059 | Arizona | Black | 31455 | . 4 University of Phoenix-Arizona | 195059 | Arizona | Hispanic | 13984 | . df.category.unique() . array([&#39;Women&#39;, &#39;American Indian / Alaska Native&#39;, &#39;Asian&#39;, &#39;Black&#39;, &#39;Hispanic&#39;, &#39;Native Hawaiian / Pacific Islander&#39;, &#39;White&#39;, &#39;Two Or More Races&#39;, &#39;Unknown&#39;, &#39;Non-Resident Foreign&#39;, &#39;Total Minority&#39;], dtype=object) . df_c_e = df[[&#39;category&#39;, &#39;enrollment&#39;]] df_c_e = df_c_e[ (df_c_e.category != &#39;Women&#39;) &amp; (df_c_e.category != &#39;Two Or More Races&#39;) &amp; (df_c_e.category != &#39;Non-Resident Foreign&#39;) &amp; (df_c_e.category != &#39;Total Minority&#39;) ] df_c_e . category enrollment . 1 American Indian / Alaska Native | 876 | . 2 Asian | 1959 | . 3 Black | 31455 | . 4 Hispanic | 13984 | . 5 Native Hawaiian / Pacific Islander | 1019 | . ... ... | ... | . 50647 Black | 0 | . 50648 Hispanic | 0 | . 50649 Native Hawaiian / Pacific Islander | 0 | . 50650 White | 1 | . 50652 Unknown | 0 | . 32235 rows √ó 2 columns . grouped = df_c_e.groupby(&#39;category&#39;, axis=0).sum() grouped[&#39;enrollment&#39;].plot(kind=&#39;pie&#39;) plt.title(&#39;Enrollment Diversity&#39;) plt.show() .",
            "url": "https://juancarl0s.com/jupyter/2020/11/14/pie-chart-plot.html",
            "relUrl": "/jupyter/2020/11/14/pie-chart-plot.html",
            "date": " ‚Ä¢ Nov 14, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Line plot",
            "content": "Line Plot . Displays information as series of data points called markers connected by straight line segments . import matplotlib as mpl import matplotlib.pyplot as plt import pandas as pd . Pandas has a built-in implementation of matplotlib, which makes plotting much easier for us. Let&#39;s try it out . df = pd.read_csv(r&#39;./college/historical_tuition.csv&#39;) df.head() . type year tuition_type tuition_cost . 0 All Institutions | 1985-86 | All Constant | 10893 | . 1 All Institutions | 1985-86 | 4 Year Constant | 12274 | . 2 All Institutions | 1985-86 | 2 Year Constant | 7508 | . 3 All Institutions | 1985-86 | All Current | 4885 | . 4 All Institutions | 1985-86 | 4 Year Current | 5504 | . cond1 = df[&#39;type&#39;] == &#39;All Institutions&#39; cond2 = df[&#39;tuition_type&#39;] == &#39;All Current&#39; all_colleges = df[cond1 &amp; cond2] all_colleges.head() . type year tuition_type tuition_cost . 3 All Institutions | 1985-86 | All Current | 4885 | . 9 All Institutions | 1995-96 | All Current | 8800 | . 15 All Institutions | 2000-01 | All Current | 10820 | . 21 All Institutions | 2001-02 | All Current | 11380 | . 27 All Institutions | 2002-03 | All Current | 12014 | . all_colleges.plot(kind=&#39;line&#39;,x=&#39;year&#39;,y=&#39;tuition_cost&#39;) plt.title(&quot;Tuition over time&quot;) plt.xlabel(&quot;School Year&quot;) plt.ylabel(&quot;Price&quot;) . Text(0, 0.5, &#39;Price&#39;) .",
            "url": "https://juancarl0s.com/jupyter/2020/11/14/line-plot.html",
            "relUrl": "/jupyter/2020/11/14/line-plot.html",
            "date": " ‚Ä¢ Nov 14, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "Histogram",
            "content": "Histogram . Way of representing the frequency distribution of a variable . import matplotlib as mpl import matplotlib.pyplot as plt import pandas as pd . Pandas has a built-in implementation of matplotlib, which makes plotting much easier for us. Let&#39;s try it out . df = pd.read_csv(r&#39;./college/salary_potential.csv&#39;) # load data df . rank name state_name early_career_pay mid_career_pay make_world_better_percent stem_percent . 0 1 | Auburn University | Alabama | 54400 | 104500 | 51.0 | 31 | . 1 2 | University of Alabama in Huntsville | Alabama | 57500 | 103900 | 59.0 | 45 | . 2 3 | The University of Alabama | Alabama | 52300 | 97400 | 50.0 | 15 | . 3 4 | Tuskegee University | Alabama | 54500 | 93500 | 61.0 | 30 | . 4 5 | Samford University | Alabama | 48400 | 90500 | 52.0 | 3 | . ... ... | ... | ... | ... | ... | ... | ... | . 930 22 | Viterbo University | Wisconsin | 46800 | 81900 | 62.0 | 3 | . 931 23 | Concordia University-Wisconsin | Wisconsin | 46700 | 81600 | 61.0 | 9 | . 932 24 | University of Wisconsin-Parkside | Wisconsin | 46000 | 81400 | 47.0 | 17 | . 933 25 | University of Wisconsin-River Falls | Wisconsin | 47100 | 81300 | 52.0 | 14 | . 934 1 | University of Wyoming | Wyoming | 52400 | 98800 | 58.0 | 25 | . 935 rows √ó 7 columns . df.mid_career_pay . 0 104500 1 103900 2 97400 3 93500 4 90500 ... 930 81900 931 81600 932 81400 933 81300 934 98800 Name: mid_career_pay, Length: 935, dtype: int64 . ax = df.mid_career_pay.plot(kind=&#39;hist&#39;) plt.title(&#39;Mid career pay&#39;) plt.xlabel(&#39;Pay&#39;) plt.ylabel(&#39;Number of colleges&#39;) plt.show() . ax = df.early_career_pay.plot(kind=&#39;hist&#39;) plt.title(&#39;Early career pay&#39;) plt.xlabel(&#39;Pay&#39;) plt.ylabel(&#39;Number of colleges&#39;) plt.show() . df[[&#39;mid_career_pay&#39;, &#39;early_career_pay&#39;]] . mid_career_pay early_career_pay . 0 104500 | 54400 | . 1 103900 | 57500 | . 2 97400 | 52300 | . 3 93500 | 54500 | . 4 90500 | 48400 | . ... ... | ... | . 930 81900 | 46800 | . 931 81600 | 46700 | . 932 81400 | 46000 | . 933 81300 | 47100 | . 934 98800 | 52400 | . 935 rows √ó 2 columns . ax = df[[&#39;mid_career_pay&#39;, &#39;early_career_pay&#39;]].plot(kind=&#39;hist&#39;, alpha=0.5) plt.title(&#39;Early and mid career pay&#39;) plt.xlabel(&#39;Pay&#39;) plt.ylabel(&#39;Number of colleges&#39;) plt.show() . import numpy as np . count, bin_edges = np.histogram(df[[&#39;mid_career_pay&#39;, &#39;early_career_pay&#39;]]) # get the bin edges to label the x axis ax = df[[&#39;mid_career_pay&#39;, &#39;early_career_pay&#39;]].plot(kind=&#39;hist&#39;, alpha=0.5, xticks=bin_edges) plt.title(&#39;Early and mid career pay&#39;) plt.xlabel(&#39;Pay&#39;) plt.ylabel(&#39;Number of colleges&#39;) plt.xticks(rotation=90) # Rotate the x axis labels plt.show() .",
            "url": "https://juancarl0s.com/jupyter/2020/11/14/histogram-plot.html",
            "relUrl": "/jupyter/2020/11/14/histogram-plot.html",
            "date": " ‚Ä¢ Nov 14, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "Box Plot",
            "content": "Box Plot . Way of representing statistics of the data with five main dimensions: . Minimum (lowest most line) | Maximum (highest line) | Median (middle line in rectangle) | First Quartile (line under Median) | Thrid Quartile (line over Median) | Ouliers (asterisks) | . import matplotlib as mpl import matplotlib.pyplot as plt import pandas as pd . Pandas has a built-in implementation of matplotlib, which makes plotting much easier for us. Let&#39;s try it out . df = pd.read_csv(r&#39;./college/salary_potential.csv&#39;) # load data df.head() . rank name state_name early_career_pay mid_career_pay make_world_better_percent stem_percent . 0 1 | Auburn University | Alabama | 54400 | 104500 | 51.0 | 31 | . 1 2 | University of Alabama in Huntsville | Alabama | 57500 | 103900 | 59.0 | 45 | . 2 3 | The University of Alabama | Alabama | 52300 | 97400 | 50.0 | 15 | . 3 4 | Tuskegee University | Alabama | 54500 | 93500 | 61.0 | 30 | . 4 5 | Samford University | Alabama | 48400 | 90500 | 52.0 | 3 | . florida = df[(df.state_name==&#39;Florida&#39;)] florida.head() . rank name state_name early_career_pay mid_career_pay make_world_better_percent stem_percent . 123 1 | Embry-Riddle Aeronautical University-Daytona B... | Florida | 63300 | 111200 | 58.0 | 35 | . 124 2 | Polytechnic University of Puerto Rico-Miami | Florida | 60600 | 108300 | 61.0 | 10 | . 125 3 | Florida Institute of Technology | Florida | 58300 | 105400 | 53.0 | 48 | . 126 4 | University of Florida | Florida | 55800 | 102800 | 52.0 | 29 | . 127 5 | Polytechnic University of Puerto Rico-Orlando | Florida | 57600 | 102200 | 66.0 | 29 | . florida.mid_career_pay.plot(kind=&#39;box&#39;) plt.title(&#39;Florida college graduates mid career pay&#39;) plt.show() . florida.early_career_pay.plot(kind=&#39;box&#39;) plt.title(&#39;Florida college graduates early career pay&#39;) plt.show() . ca = df[(df.state_name==&#39;California&#39;)] ca.head() . rank name state_name early_career_pay mid_career_pay make_world_better_percent stem_percent . 54 1 | Harvey Mudd College | California | 88800 | 158200 | 55.0 | 85 | . 55 2 | Samuel Merritt University | California | 91200 | 154100 | 90.0 | 0 | . 56 3 | California Institute of Technology | California | 84100 | 151600 | 53.0 | 97 | . 57 4 | Stanford University | California | 79000 | 145200 | 56.0 | 51 | . 58 5 | Charles R Drew University of Medicine and Science | California | 78300 | 135700 | NaN | 3 | . ca.mid_career_pay.plot(kind=&#39;box&#39;) plt.title(&#39;California college graduates mid career pay&#39;) plt.show() . ca.early_career_pay.plot(kind=&#39;box&#39;) plt.title(&#39;California college graduates early career pay&#39;) plt.show() .",
            "url": "https://juancarl0s.com/jupyter/2020/11/14/box-plot.html",
            "relUrl": "/jupyter/2020/11/14/box-plot.html",
            "date": " ‚Ä¢ Nov 14, 2020"
        }
        
    
  
    
        ,"post5": {
            "title": "Barchart",
            "content": "Barchart . Each bar in the chart is proportional to the represented value. Commonly used to compare values of a variable at a given point in time . import matplotlib as mpl import matplotlib.pyplot as plt import pandas as pd . Pandas has a built-in implementation of matplotlib, which makes plotting much easier for us. Let&#39;s try it out . df = pd.read_csv(r&#39;./college/historical_tuition.csv&#39;) # load data df . type year tuition_type tuition_cost . 0 All Institutions | 1985-86 | All Constant | 10893 | . 1 All Institutions | 1985-86 | 4 Year Constant | 12274 | . 2 All Institutions | 1985-86 | 2 Year Constant | 7508 | . 3 All Institutions | 1985-86 | All Current | 4885 | . 4 All Institutions | 1985-86 | 4 Year Current | 5504 | . ... ... | ... | ... | ... | . 265 Private | 2016-17 | 4 Year Constant | 41468 | . 266 Private | 2016-17 | 2 Year Constant | 24882 | . 267 Private | 2016-17 | All Current | 40925 | . 268 Private | 2016-17 | 4 Year Current | 41468 | . 269 Private | 2016-17 | 2 Year Current | 24882 | . 270 rows √ó 4 columns . cond = df.tuition_type == &#39;All Current&#39; all_colleges = df[cond] all_colleges.sort_values(by=[&#39;year&#39;], ascending=True) all_colleges.head() . type year tuition_type tuition_cost . 3 All Institutions | 1985-86 | All Current | 4885 | . 9 All Institutions | 1995-96 | All Current | 8800 | . 15 All Institutions | 2000-01 | All Current | 10820 | . 21 All Institutions | 2001-02 | All Current | 11380 | . 27 All Institutions | 2002-03 | All Current | 12014 | . private_colleges = all_colleges[all_colleges.type==&#39;Private&#39;] private_colleges = private_colleges[[&#39;year&#39;, &#39;tuition_cost&#39;]] private_colleges . year tuition_cost . 195 1985-86 | 8885 | . 201 1995-96 | 17208 | . 207 2000-01 | 21373 | . 213 2001-02 | 22413 | . 219 2002-03 | 23340 | . 225 2003-04 | 24624 | . 231 2004-05 | 25817 | . 237 2005-06 | 26908 | . 243 2009-10 | 31341 | . 249 2013-14 | 35995 | . 255 2014-15 | 37422 | . 261 2015-16 | 39016 | . 267 2016-17 | 40925 | . private = pd.DataFrame({ &#39;Tuition&#39;: private_colleges.tuition_cost.tolist(), &#39;Year&#39;: private_colleges.year.tolist(), }) private.plot(kind=&#39;bar&#39;, x=&#39;Year&#39;, y=&#39;Tuition&#39;) plt.title(&#39;Private tuition price&#39;) . Text(0.5, 1.0, &#39;Private tuition price&#39;) . public_colleges = all_colleges[all_colleges.type==&#39;Public&#39;] public_colleges = public_colleges[[&#39;year&#39;, &#39;tuition_cost&#39;]] public_colleges public = pd.DataFrame({ &#39;Tuition&#39;: public_colleges.tuition_cost.tolist(), &#39;Year&#39;: public_colleges.year.tolist(), }) public.plot(kind=&#39;bar&#39;, x=&#39;Year&#39;, y=&#39;Tuition&#39;) plt.title(&#39;Public tuition price&#39;) . Text(0.5, 1.0, &#39;Public tuition price&#39;) . public_private = pd.DataFrame({ &#39;Public&#39;: public_colleges.tuition_cost.tolist(), &#39;Private&#39;: private_colleges.tuition_cost.tolist() }, index=public_colleges.year.tolist() ) public_private.plot(kind=&#39;bar&#39;) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7ff52e9cb280&gt; .",
            "url": "https://juancarl0s.com/jupyter/2020/11/14/barchart-plot.html",
            "relUrl": "/jupyter/2020/11/14/barchart-plot.html",
            "date": " ‚Ä¢ Nov 14, 2020"
        }
        
    
  
    
        ,"post6": {
            "title": "Area Plot",
            "content": "Area Plot . Also know as area charty or area graph, it&#39;s commonly used to represent cumulated totals. This plot is based ont he line plot . import matplotlib as mpl import matplotlib.pyplot as plt import pandas as pd . Pandas has a built-in implementation of matplotlib, which makes plotting much easier for us. Let&#39;s try it out . df = pd.read_csv(r&#39;./college/historical_tuition.csv&#39;) # load data df.head() . type year tuition_type tuition_cost . 0 All Institutions | 1985-86 | All Constant | 10893 | . 1 All Institutions | 1985-86 | 4 Year Constant | 12274 | . 2 All Institutions | 1985-86 | 2 Year Constant | 7508 | . 3 All Institutions | 1985-86 | All Current | 4885 | . 4 All Institutions | 1985-86 | 4 Year Current | 5504 | . df.type.unique() # get unique values for the &#39;type&#39; column . array([&#39;All Institutions&#39;, &#39;Public&#39;, &#39;Private&#39;], dtype=object) . cond = df.tuition_type == &#39;All Current&#39; all_colleges = df[cond] all_colleges.sort_values(by=[&#39;year&#39;], ascending=True) all_colleges.head() . type year tuition_type tuition_cost . 3 All Institutions | 1985-86 | All Current | 4885 | . 9 All Institutions | 1995-96 | All Current | 8800 | . 15 All Institutions | 2000-01 | All Current | 10820 | . 21 All Institutions | 2001-02 | All Current | 11380 | . 27 All Institutions | 2002-03 | All Current | 12014 | . private_colleges = all_colleges[all_colleges.type==&#39;Private&#39;] private_colleges = private_colleges[[&#39;year&#39;, &#39;tuition_cost&#39;]] private_colleges.head() . year tuition_cost . 195 1985-86 | 8885 | . 201 1995-96 | 17208 | . 207 2000-01 | 21373 | . 213 2001-02 | 22413 | . 219 2002-03 | 23340 | . public_colleges = all_colleges[all_colleges.type==&#39;Public&#39;] public_colleges = public_colleges[[&#39;year&#39;, &#39;tuition_cost&#39;]] public_colleges.head() . year tuition_cost . 117 1985-86 | 3571 | . 123 1995-96 | 6256 | . 129 2000-01 | 7586 | . 135 2001-02 | 8022 | . 141 2002-03 | 8502 | . public_private_tuition = pd.DataFrame({ &#39;Public&#39;: public_colleges[&#39;tuition_cost&#39;].tolist(), &#39;Private&#39;: private_colleges[&#39;tuition_cost&#39;].tolist(), &#39;Year&#39;:private_colleges[&#39;year&#39;].tolist(), }) public_private_tuition.head() . Public Private Year . 0 3571 | 8885 | 1985-86 | . 1 6256 | 17208 | 1995-96 | . 2 7586 | 21373 | 2000-01 | . 3 8022 | 22413 | 2001-02 | . 4 8502 | 23340 | 2002-03 | . ax = public_private_tuition.plot(kind=&#39;area&#39;, x=&#39;Year&#39;) .",
            "url": "https://juancarl0s.com/jupyter/2020/11/14/area-plot.html",
            "relUrl": "/jupyter/2020/11/14/area-plot.html",
            "date": " ‚Ä¢ Nov 14, 2020"
        }
        
    
  
    
        ,"post7": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.‚Ü© . 2. This is the other footnote. You can even have a link!‚Ü© .",
            "url": "https://juancarl0s.com/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " ‚Ä¢ Feb 20, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Blog of juancarl0s. .",
          "url": "https://juancarl0s.com/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ ‚Äúsitemap.xml‚Äù | absolute_url }} | .",
          "url": "https://juancarl0s.com/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}